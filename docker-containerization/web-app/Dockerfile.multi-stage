# DevOps Resume Platform - Multi-stage Dockerfile
# Оптимизированный multi-stage build для продакшн

# Stage 1: Build
FROM node:18-alpine AS builder

# Метаданные
LABEL stage=builder

# Установка рабочей директории
WORKDIR /app

# Копирование файлов зависимостей
COPY package*.json ./

# Установка всех зависимостей (включая dev)
RUN npm ci && \
    npm cache clean --force

# Копирование исходного кода
COPY . .

# Сборка приложения
RUN npm run build && \
    npm prune --production

# Stage 2: Production
FROM node:18-alpine AS production

# Метаданные
LABEL maintainer="Ромадановский Виталий Денисович <twinleq@bk.ru>"
LABEL description="DevOps Resume Platform Web Application - Production"
LABEL version="1.0.0"

# Установка системных зависимостей
RUN apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# Создание пользователя
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Установка рабочей директории
WORKDIR /app

# Копирование только production зависимостей
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package*.json ./

# Копирование собранного приложения
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/public ./public

# Изменение владельца файлов
RUN chown -R nextjs:nodejs /app

# Переключение на непривилегированного пользователя
USER nextjs

# Открытие порта
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Переменные окружения
ENV NODE_ENV=production
ENV PORT=3000

# Запуск приложения
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/server.js"]
