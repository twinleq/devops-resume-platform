name: Simple Security Scanning

on:
  schedule:
    # Run security scans weekly on Monday at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  # Backend Security Scan
  backend-security:
    name: Backend Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Run npm audit
      run: |
        cd backend
        npm audit --audit-level moderate

    - name: Check for known vulnerabilities
      run: |
        cd backend
        echo "Checking for known vulnerabilities..."
        if npm audit --audit-level moderate --json | jq -e '.vulnerabilities | length > 0' > /dev/null; then
          echo "❌ Vulnerabilities found"
          npm audit --audit-level moderate
          exit 1
        else
          echo "✅ No vulnerabilities found"
        fi

  # Container Security Scan
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      run: |
        cd backend
        docker build -t devops-resume-backend:security-scan .

    - name: Build frontend image
      run: |
        cd app
        docker build -t devops-resume-frontend:security-scan .

    - name: Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'devops-resume-backend:security-scan'
        format: 'table'
        exit-code: '0'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Run Trivy vulnerability scanner - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'devops-resume-frontend:security-scan'
        format: 'table'
        exit-code: '0'
        severity: 'CRITICAL,HIGH,MEDIUM'

  # Configuration Security Check
  config-security:
    name: Configuration Security Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for hardcoded secrets
      run: |
        echo "Checking for potential hardcoded secrets..."
        # Check for common secret patterns
        if grep -r -i "password.*=" backend/ || grep -r -i "secret.*=" backend/ || grep -r -i "key.*=" backend/; then
          echo "⚠️ Potential secrets found in code"
          echo "Please review and use environment variables instead"
        else
          echo "✅ No obvious secrets found in code"
        fi

    - name: Check Docker security
      run: |
        echo "Checking Docker security best practices..."
        # Check if Dockerfiles use non-root user
        if grep -q "USER" backend/Dockerfile && grep -q "USER" app/Dockerfile; then
          echo "✅ Dockerfiles use non-root user"
        else
          echo "⚠️ Dockerfiles should use non-root user for security"
        fi

    - name: Check environment variables
      run: |
        echo "Checking environment variable usage..."
        if grep -q "process.env" backend/server.js; then
          echo "✅ Environment variables are used"
        else
          echo "⚠️ Consider using environment variables for configuration"
        fi

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [backend-security, container-security, config-security]
    if: always()
    steps:
    - name: Security Summary
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Security: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Container Security: ${{ needs.container-security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Configuration Security: ${{ needs.config-security.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.backend-security.result }}" == "success" && "${{ needs.container-security.result }}" == "success" && "${{ needs.config-security.result }}" == "success" ]]; then
          echo "- ✅ All security checks passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ Some security checks failed - please review" >> $GITHUB_STEP_SUMMARY
        fi
